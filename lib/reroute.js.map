{"version":3,"file":"reroute.js","sources":["../src/utils/logger.js","../src/s3.js","../src/utils/deepmerge.js","../src/index.js"],"sourcesContent":["import debug from 'debug';\nconst log = debug('reroute:log');\nlog.log = console.log.bind(console);\n\nexport default log;\n","import AWS from 'aws-sdk';\nconst S3 = new AWS.S3();\n\nexport default S3;\n","import merge from 'deepmerge';\n\nconst deepmerge = (x, y, { arrayMerge, ...rest } = {}) =>\n  merge(x, y, { ...rest, arrayMerge: arrayMerge || combineMerge });\n\nconst all = (arr, { arrayMerge, ...rest } = {}) =>\n  merge.all(arr, { ...rest, arrayMerge: arrayMerge || combineMerge });\n\nconst emptyTarget = value => (Array.isArray(value) ? [] : {});\nconst clone = (value, options) => merge(emptyTarget(value), value, options);\nconst combineMerge = (target, source, options) => {\n  const destination = target.slice();\n  source.forEach((e, i) => {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone ? clone(e, options) : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = merge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n};\n\nexport default deepmerge;\nexport { all };\n","import logger from './utils/logger';\nimport { STATUS_CODES } from 'http';\nimport S3 from './s3';\nimport axios from 'axios';\nimport merge from './utils/deepmerge';\nimport _find from 'lodash.find';\nimport _reduce from 'lodash.reduce';\nimport _omit from 'lodash.omit';\nimport _omitBy from 'lodash.omitby';\nimport { parse } from 'url';\nimport path from 'path';\nimport pathMatch from 'path-match';\n\nconst route = pathMatch({\n  sensitive: false,\n  strict: false,\n  end: true,\n});\n\nlet options;\nconst rerouteMiddleware = async (opts = {}, handler, next) => {\n  const { request } = handler.event.Records[0].cf;\n  const { origin } = request;\n  const defaults = {\n    file: '_redirects',\n    regex: {\n      htmlEnd: /(.*)\\/((.*)\\.html?)$/,\n      ignoreRules: /^(?:#.*[\\r\\n]|\\s*[\\r\\n])/gm,\n      ruleline: /([^\\s\\r\\n]+)(?:\\s+)([^\\s\\r\\n]+)(?:\\s+(\\d+)([!]?))?/,\n    },\n    defaultStatus: 301,\n    redirectStatuses: [301, 302, 303],\n    bucketName: origin.s3.domainName.replace('.s3.amazonaws.com', ''),\n    friendlyUrls: true,\n    defaultDoc: `index.html`,\n    custom404: `404.html`,\n  };\n  options = merge(defaults, opts);\n  logger('options', options);\n\n  logger('REQUEST.URI: ', request.uri);\n\n  try {\n    // Check if file exists\n    const keyExists = await doesKeyExist(request.uri);\n\n    // Check if there is a file with extension at the end of the path\n    const isFile = path.extname(request.uri) !== '';\n    // Detect if needing friendly URLs\n    const isUnFriendlyUrl =\n      options.friendlyUrls && request.uri.match(options.regex.htmlEnd);\n\n    let event;\n    // Apply Friendly URLs if file doesn't exist\n    // Do not apply any rules and Redirect\n    if (!keyExists && isUnFriendlyUrl) {\n      const [first, fullpath, file, filename] = isUnFriendlyUrl;\n      const end = filename === 'index' ? '' : `${filename}/`;\n      const finalKey = `${fullpath}/${end}`;\n      logger('UN-FriendlyURL [from:to]: ', request.uri, finalKey);\n      event = redirect(finalKey, 301);\n    } else {\n      // Gather and parse rules\n      const data = await getRedirectData();\n\n      // Find URI match in the rules\n      const match = findMatch(data, request.uri);\n      if (match) {\n        logger('Match FOUND: ', match.parsedTo);\n        // Match: match found\n        // Use status to decide how to handle\n        event = isRedirectURI(match.status)\n          ? redirect(match.parsedTo, match.status)\n          : isAbsoluteURI(match.parsedTo)\n          ? await proxy(match.parsedTo, handler.event)\n          : await rewrite(forceDefaultDoc(match.parsedTo), handler.event);\n      } else {\n        logger('NO Match');\n        // Pass-Through: No match, so other then DefaultDoc, let it pass through\n        event = !isFile\n          ? await rewrite(forceDefaultDoc(request.uri), handler.event)\n          : handler.event;\n      }\n    }\n\n    handler.event = event;\n  } catch (err) {\n    throw err;\n  }\n\n  logger('RETURNING EVENT!!!!');\n  return;\n};\n\nconst blacklistedHeaders = {\n  exact: [\n    'Connection',\n    'Expect',\n    'Keep-alive',\n    'Proxy-Authenticate',\n    'Proxy-Authorization',\n    'Proxy-Connection',\n    'Trailer',\n    'Upgrade',\n    'X-Accel-Buffering',\n    'X-Accel-Charset',\n    'X-Accel-Limit-Rate',\n    'X-Accel-Redirect',\n    'X-Cache',\n    'X-Forwarded-Proto',\n    'X-Real-IP',\n    'Accept-Encoding',\n    'Content-Length',\n    'If-Modified-Since',\n    'If-None-Match',\n    'If-Range',\n    'If-Unmodified-Since',\n    'Range',\n    'Transfer-Encoding',\n    'Via',\n  ],\n  startsWith: ['X-Amzn-', 'X-Amz-Cf-', 'X-Edge-'],\n};\n\nconst isBlacklistedProperty = name =>\n  blacklistedHeaders.exact.includes(name) ||\n  !!blacklistedHeaders.startsWith.find(i => name.startsWith(i));\n\nconst isRedirectURI = status => options.redirectStatuses.includes(status);\n\nconst findMatch = (data, uri) => {\n  let params;\n  const match = _find(data, o => {\n    const from = route(o.from);\n    params = from(parse(uri).pathname);\n    return params !== false;\n  });\n  return match && { ...match, parsedTo: replaceAll(params, match.to) };\n};\n\nconst getRedirectData = () => {\n  logger('Getting Rules from: ', options.rules ? 'Options' : 'S3');\n  return options.rules\n    ? parseRules(options.rules)\n    : S3.getObject({\n        Bucket: options.bucketName,\n        Key: options.file,\n      })\n        .promise()\n        .then(data => parseRules(data.Body.toString()));\n};\n\nconst parseRules = stringFile =>\n  stringFile\n    // remove empty and commented lines\n    .replace(options.regex.ignoreRules, '')\n    // split all lines\n    .split(/[\\r\\n]/gm)\n    // strip out the last line break\n    .filter(l => l !== '')\n    .map(l => {\n      // regex\n      const [first, from, to, status, force] = l.match(options.regex.ruleline);\n      // restructure into object\n      return {\n        from,\n        to,\n        status: status ? parseInt(status, 10) : options.defaultStatus,\n        force: !!force,\n      };\n    });\n\nconst replaceAll = (obj, pattern) =>\n  replaceSplats(obj, replacePlaceholders(obj, pattern));\n\nconst replacePlaceholders = (obj, pattern) =>\n  pattern.replace(/:(?!splat)(\\w+)/g, (_, k) => obj[k]);\n\nconst replaceSplats = (obj, pattern) =>\n  _reduce(\n    obj,\n    (result, value, key) => result.replace(/(:splat)/g, (_, k) => obj[key]),\n    pattern,\n  );\n\nconst doesKeyExist = key => {\n  const parsedKey = key.replace(/^\\/+/, '');\n  return S3.headObject({\n    Bucket: options.bucketName,\n    Key: parsedKey,\n  })\n    .promise()\n    .then(data => {\n      logger('Key FOUND: ', parsedKey);\n      return true;\n    })\n    .catch(err => {\n      if (err.statusCode === 404) {\n        logger('Key NOT Found: ', parsedKey);\n        return false;\n      }\n      throw err;\n    });\n};\n\nconst redirect = (to, status) => {\n  logger('Redirecting: ', to, status);\n  return {\n    status,\n    statusDescription: STATUS_CODES[status],\n    headers: {\n      location: [{ key: 'Location', value: to }],\n    },\n  };\n};\n\nconst rewrite = async (to, event) => {\n  logger('Rewriting: ', to);\n  const resp =\n    (!isAbsoluteURI(to) &&\n      !(await doesKeyExist(to)) &&\n      (await get404Response())) ||\n    merge(event, { Records: [{ cf: { request: { uri: to } } }] });\n  return resp;\n};\n\nconst proxy = (url, event) => {\n  logger('PROXY start: ', url);\n  const { request } = event.Records[0].cf;\n  const config = { ...lambdaReponseToObj(request), validateStatus: null };\n  logger('PROXY config: ', config);\n  return axios(url, config)\n    .then(data => {\n      logger('PROXY data: ', _omit(data, ['request', 'config']));\n      return getProxyResponse(data);\n    })\n    .catch(err => {\n      logger('PROXY err: ', err);\n      throw err;\n    });\n};\n\nconst lambdaReponseToObj = req => {\n  const { method, body } = req;\n  return {\n    method,\n    headers: _omit(\n      _reduce(\n        req.headers,\n        (result, value, key) => ({ ...result, [value[0].key]: value[0].value }),\n        {},\n      ),\n      ['Host'],\n    ),\n  };\n};\n\nconst isAbsoluteURI = to => {\n  const test = /^(?:[a-z]+:)?\\/\\//.test(to);\n  logger('isAbsoluteURI: ', test, to);\n  return test;\n};\n\nconst forceDefaultDoc = uri =>\n  path.extname(uri) === '' ? path.join(uri, options.defaultDoc) : uri;\n\nconst getProxyResponse = resp => {\n  const { status, statusText, data } = resp;\n  logger('getProxyResponse raw headers: ', resp.headers);\n  const headers = _omitBy(\n    _reduce(\n      resp.headers,\n      (result, value, key) => ({\n        ...result,\n        [key]: [\n          {\n            key: key.replace(/(?<=-{1})(?:.)|^(?:.){1}/g, v => v.toUpperCase()),\n            value: resp.headers[key],\n          },\n        ],\n      }),\n      {},\n    ),\n    (value, key) => isBlacklistedProperty(value[0].key),\n  );\n  logger('getProxyResponse parse headers: ', headers);\n  const response = {\n    status,\n    statusDescription: statusText,\n    headers,\n    body: JSON.stringify(data),\n  };\n  return response;\n};\n\nconst get404Response = () => {\n  return S3.getObject({\n    Bucket: options.bucketName,\n    Key: options.custom404,\n  })\n    .promise()\n    .then(({ Body }) => {\n      logger('Custom 404 FOUND');\n      return {\n        status: '404',\n        statusDescription: STATUS_CODES['404'],\n        headers: {\n          'content-type': [\n            {\n              key: 'Content-Type',\n              value: 'text/html',\n            },\n          ],\n        },\n        body: Body.toString(),\n      };\n    })\n    .catch(err => {\n      if (err.statusCode === 404) {\n        logger('Custom 404 NOT Found');\n        return false;\n      }\n      logger('Custom 404 Exists');\n      throw err;\n    });\n};\n\nexport default opts => ({\n  before: rerouteMiddleware.bind(null, opts),\n});\n"],"names":["log","debug","console","bind","S3","AWS","deepmerge","x","y","arrayMerge","rest","merge","combineMerge","emptyTarget","value","Array","isArray","clone","options","target","source","destination","slice","forEach","e","i","cloneRequested","shouldClone","isMergeableObject","indexOf","push","route","pathMatch","rerouteMiddleware","opts","handler","next","request","event","Records","cf","origin","defaults","s3","domainName","replace","uri","keyExists","doesKeyExist","isFile","path","extname","isUnFriendlyUrl","friendlyUrls","match","regex","htmlEnd","first","fullpath","file","filename","end","finalKey","redirect","data","getRedirectData","findMatch","parsedTo","isRedirectURI","status","isAbsoluteURI","proxy","rewrite","forceDefaultDoc","err","blacklistedHeaders","isBlacklistedProperty","name","exact","includes","startsWith","find","redirectStatuses","params","_find","o","from","parse","pathname","replaceAll","to","rules","parseRules","getObject","bucketName","promise","then","Body","toString","stringFile","ignoreRules","split","filter","l","map","ruleline","force","parseInt","defaultStatus","obj","pattern","replaceSplats","replacePlaceholders","_","k","_reduce","result","key","parsedKey","headObject","catch","statusCode","STATUS_CODES","resp","get404Response","url","config","lambdaReponseToObj","validateStatus","axios","_omit","getProxyResponse","req","method","body","headers","test","join","defaultDoc","statusText","_omitBy","v","toUpperCase","response","JSON","stringify","custom404"],"mappings":"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"}